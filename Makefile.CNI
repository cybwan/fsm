#!make

SHELL = bash

CC = gcc
CLANG = clang

BASE_DIR = $(dir $(abspath $(lastword $(MAKEFILE_LIST))))
INC_DIR = $(abspath ${BASE_DIR})/bpf/include
SRC_DIR = $(abspath ${BASE_DIR})/bpf/src
BIN_DIR = $(abspath ${BASE_DIR})/bin
BPF_DIR = $(abspath ${BASE_DIR})/bpf

MESH_KERN_OUT = mesh.kern.o
MESH_KERN_SRC = $(patsubst %.o,%.c,${MESH_KERN_OUT})

BPF_CFLAGS = \
	-O2 \
	-D__KERNEL__ \
	-Wno-unused-value     \
	-Wno-pointer-sign     \
	-Wno-compare-distinct-pointer-types

CGO_CFLAGS_DYN = "-I. -I./bpf/include -I/usr/include/"
CGO_LDFLAGS_DYN = "-lelf -lz -lbpf"

BPF_FS  = /sys/fs/bpf

.PHONY: bpf-fs
bpf-fs:
	@mountpoint -q ${BPF_FS} || mount -t bpf bpf ${BPF_FS}

.PHONY: debug-fs
debug-fs:
	@mountpoint -q /sys/kernel/debug || mount -t debugfs debugfs /sys/kernel/debug

.PHONY: go-generate
go-generate: export BPF_CFLAGS := $(BPF_CFLAGS)
go-generate: export BPF_INC_DIR := $(INC_DIR)
go-generate: export BPF_SRC_DIR := $(SRC_DIR)
go-generate:
	@go generate ./...

.PHONY: go-build-fsm-tc
go-build-fsm-tc:
	@go build -o ${BIN_DIR}/fsm-tc bpf/fsm-tc.go

.PHONY: build
build: bpf

.PHONY: bpf-fmt
bpf-fmt:
	@find . -regex '.*\.\(c\|h\)' -exec clang-format -style=file -i {} \;

.PHONY: bpf-build
bpf-build: ${BIN_DIR}/${MESH_KERN_OUT}

${BIN_DIR}/${MESH_KERN_OUT}: ${SRC_DIR}/${MESH_KERN_SRC}
	@clang -I${INC_DIR} ${BPF_CFLAGS} -emit-llvm -c -g $< -o - | llc -march=bpf -filetype=obj -o $@

.PHONY: bpf-clean
bpf-clean:
	@rm -f ${BIN_DIR}/${MESH_KERN_OUT}

.PHONY: bpf
bpf: bpf-clean bpf-fmt bpf-build

.PHONY: load
load: debug-fs bpf-fs bpf-build
	@bpftool prog loadall ${BIN_DIR}/${MESH_KERN_OUT} /sys/fs/bpf/fsm pinmaps /sys/fs/bpf/fsm

.PHONY: clean
clean:
	@rm -rf /sys/fs/bpf/fsm

.PHONY: test
test:
	@make -f Makefile.CNI clean bpf load
	@make -f bpf/Makefile test-tc-detach
	@bin/fsm-tc --action=init-progs-map
	@bin/fsm-tc --action=init-nat-map
	@bin/fsm-tc --action=attach
	@make -f bpf/Makefile test-tc-show
	@make -f bpf/Makefile h1-curl-demo